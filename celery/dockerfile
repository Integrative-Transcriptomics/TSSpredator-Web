
# first stage build the frontend
# FROM node:20-alpine3.18 as build
FROM --platform=linux/x86_64 alpine:3.21.2

# Set the working directory in the container to /app
# Set the working directory in the container to /app
# WORKDIR /import
# COPY .. .
# Copy the current directory contents into the container at /app

# COPY ../server_tsspredator .
# COPY ../requirements.txt .
# COPY ../setup.py .
# COPY ../TSSpredator.jar .

# RUN corepack enable
# # Install Node.js dependencies
# RUN npm run build


# Set the working directory in the container to /app
WORKDIR /app

# copy the server directory and dist from previous buildstage into the container at /app
COPY server_tsspredator /app/server_tsspredator
COPY requirements.txt /app
COPY setup.py /app
COPY server_tsspredator/TSSpredator.jar /app
RUN apk add gcompat libbz2 libcurl libstdc++ krb5-dev zlib gcc musl-dev g++ curl-dev
RUN wget https://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bedGraphToBigWig -P /app
RUN chmod +x /app/bedGraphToBigWig

# Install java 17
RUN apk add --update --no-cache openjdk17-jre-headless


# Install python3.11
RUN apk add --update --no-cache python3-dev py3-pip
RUN python3 -m venv /app/env_tss_predator_celery
ENV PATH="/app/env_tss_predator_celery/bin:$PATH"
RUN python3 -m pip install --upgrade pip
# install python dependencies
RUN python3 -m pip install -r requirements.txt

# Install the server package
RUN pip install -e .

# Make port 5001 available to the world outside this container
EXPOSE 5001
ENV TSSPREDATOR_DATA_PATH="/data"
ENV TSSPREDATOR_SERVER_LOCATION="/app"
ENV TSSPREDATOR_TEMPDATA="/tmpData"
ENV TSSPREDATOR_REDIS_HOST="redis"

RUN rm -rf /app/requirements.txt 
RUN rm -rf /app/setup.py


# The command that will be executed when the container is run
CMD ["gunicorn","--workers", "6","--timeout","500","--graceful-timeout", "500", "--bind", "0.0.0.0:5001", "wsgi:tsspredator"]